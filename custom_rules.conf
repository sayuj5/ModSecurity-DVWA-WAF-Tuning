# =========================================================
# Custom ModSecurity Rules and Tuning Exclusions
# File: /etc/modsecurity/custom_rules.conf
#
# This file is used for project-specific rules, such as 
# blocking known scanners, and crucial WAF tuning exclusions.
# =========================================================

# ---------------------------------------------------------
# Custom Attack Detection Rules
# ---------------------------------------------------------

# Custom Rule 1000001: Basic SQL Injection Pattern Detection
# Blocks simple SQL keywords often used in attacks.
SecRule ARGS|REQUEST_BODY "@pm select from union insert delete" \
  "id:1000001,\
  phase:2,\
  block,\
  capture,\
  msg:'Custom Rule: Potential SQL Injection Attempt Detected',\
  logdata:'Matched Data: %{TX.0}',\
  tag:'WEB_ATTACK/SQL_INJECTION',\
  severity:'CRITICAL'"

# Custom Rule 1000002: Basic Cross-Site Scripting (XSS) Detection
# Blocks common XSS payloads like <script> or alert().
SecRule ARGS|REQUEST_BODY "@rx s?cript>|alert\(|prompt\(|onload=" \
  "id:1000002,\
  phase:2,\
  block,\
  capture,\
  msg:'Custom Rule: Potential XSS Attempt Detected',\
  logdata:'Matched Data: %{TX.0}',\
  tag:'WEB_ATTACK/XSS',\
  severity:'CRITICAL'"


# ---------------------------------------------------------
# Custom Scanner and Tool Blocking Rule
# ---------------------------------------------------------

# Custom Rule 1000010: Block Known Security Scanners/Tools
# Targets User-Agents known to belong to common scanners (sqlmap, acunetix).
SecRule REQUEST_HEADERS:User-Agent "@pm sqlmap acunetix nikto zap" \
  "id:1000010,\
  phase:1,\
  block,\
  capture,\
  msg:'Custom Rule: Detected Automated Security Scanner User-Agent',\
  logdata:'Matched User-Agent: %{REQUEST_HEADERS.User-Agent}',\
  tag:'SCANNER/TOOL_BLOCKING',\
  severity:'WARNING'"

# ---------------------------------------------------------
# WAF False Positive Tuning (Whitelisting)
# ---------------------------------------------------------

# This section is critical for maintaining application functionality.
# It uses 'SecRuleRemoveById' to disable specific, overly-aggressive 
# CRS rules only for the specific application paths that trigger a False Positive.

# Example Tuning: Disable specific CRS rule for a path to fix a false positive
# (Based on the example in the project report, where rule 941160 
# blocks a legitimate submission on the XSS Reflected page.)
<LocationMatch "/DVWA/vulnerabilities/xss_r/">
  # Rule 941160 often relates to XSS/payload detection. 
  # Removing it here stops the false positive without affecting other pages.
  SecRuleRemoveById 941160
</LocationMatch>


# Add all future tuning exclusions below this line using the same format.
# <LocationMatch "/path/to/vulnerable/endpoint/">
#   SecRuleRemoveById [RULE_ID_TO_REMOVE]
# </LocationMatch>